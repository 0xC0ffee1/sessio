syntax = "proto3";

option java_multiple_files = true;
option java_package = "net.c0ffee1.sessio.clientipc";
option java_outer_classname = "SessioClientIPC";

package clientipc;

service ClientIPC {
    rpc NewConnection(NewConnectionRequest) returns (NewConnectionResponse);
    rpc NewSession(NewSessionRequest) returns (NewSessionResponse);

    rpc GenKeys(GenKeysRequest) returns (GenKeysResponse);
    rpc GetPublicKey(GetKeyRequest) returns (PublicKey);

    //Open a generic SSH channel and a bi-directional stream
    rpc OpenChannel(stream Msg) returns (stream Msg);

    rpc CheckSettingsValidity(SettingCheckRequest) returns (SettingCheckResponse);
    rpc StartCoordinator(CoordinatorStartRequest) returns (CoordinatorStartResponse);

    rpc LocalPortForward(SessionData) returns (LocalPortForwardResponse);

    rpc GetNatFilterType(NatFilterRequest) returns (NatFilterResponse);

    //SFTP RPCs
    rpc OpenSftpChannel(SessionData) returns (SftpRequestResponse);
    rpc ListDirectory(Path) returns (FileList);
    rpc FileDownload(FileTransferRequest) returns (stream FileTransferStatus);
    rpc FileUpload(FileTransferRequest) returns (stream FileTransferStatus);

    rpc GetSettings(SettingsRequest) returns (Settings);
    rpc GetSaveData(GetSaveDataRequest) returns (UserData);

    rpc SaveSettings(Settings) returns (Settings);
    rpc SaveUserData(UserData) returns (UserData);

    rpc GetActiveSessions(SessionRequest) returns (SessionMap);
}

message CoordinatorStartRequest {

}

message CoordinatorStartResponse {
    bool started = 1;
}

message SettingCheckRequest {

}

message SettingCheckResponse {
    bool valid = 1;
}

service ClientEventService{
    //Will unsubscribe as soon as this stream is closed
    rpc Subscribe(SubscribeRequest) returns (stream ClientEvent);
}

message SubscribeRequest{

}

message ClientEvent{
    oneof kind {
        CloseEvent close = 1;
    }
    enum StreamType{
        TRANSPORT = 0;
        SESSION = 1;
        CHANNEL = 2;
    }
    message CloseEvent{
        StreamType stream_type = 1;
        string close_reason = 2;
        string id = 3;
    }
    message ServerMigrateEvent{
        string conn_id = 1;
        string new_ip = 2;
    }
}

message NatFilterRequest{

}
enum NatFilterType{
    ENDPOINT_INDEPENDENT = 0;
    ADDRESS_DEPENDENT = 1;
    ADDRESS_AND_PORT_DEPENDENT = 2;
    UNKNOWN =3;
}

message NatFilterResponse{
    NatFilterType type = 1;
}

message SessionMap {
    //Device, session data
    map<string, SessionData> map = 1;
    //Device, Device status
    map<string, DeviceStatus> parents = 2;
}

message DeviceStatus{
    bool connected = 1;
}

message SessionRequest{
    optional string parent = 1;
}

message SessionData{
    oneof kind {
        PTYSession pty = 1;
        SFTPSession sftp = 2;
        LPFSession lpf = 3;
    }

    message PTYSession{
        
    }
    message SFTPSession{
        
    }
    message LPFSession{
        string local_host = 1;
        uint32 local_port = 2;
        string remote_host = 3;
        uint32 remote_port = 4;
    }
    //ID of the server
    optional string session_id = 4;
    string username = 5;
    string device_id = 6;
}

message LocalPortForwardResponse{

}

message LocalPortForwardRequest{
    string local_host = 1;
    uint32 local_port = 2;
    string remote_host = 3;
    uint32 remote_port = 4;
    string session_id = 5;
}

message FileDeleteRequest{
    repeated string files = 1;
}

message GetKeyRequest{

}

message PublicKey{
    string key = 1;
}


message GetSaveDataRequest{
    
}

message SettingsRequest{
    
} 

message Settings {
    string coordinator_url = 1;
    string device_id = 2;
}

message UserData {
    repeated string used_device_ids = 1;
    map<string, SessionData> saved_sessions = 2;
}

message EmptyValue {

}

message Value{
    oneof kind {
        string string_value = 1;
        int32 int_value = 2;
        MapValue json_value = 3;
        ListValue list_value = 4;
        EmptyValue empty = 5;
    }
}

message MapValue {
    map<string, Value> map = 1;
}

message ListValue {
    repeated Value list = 1;
}


message SftpRequest{
    string session_id = 1;
}

message SftpRequestResponse{
    string channel_id = 1;
}

//This is mainly used for generic channels that require a continuous stream to frontend (not SFTP or Local port forward)
message Msg{
    oneof type{
        Data data = 1;
        PtyRequest pty_request = 2;
        ShellRequest shell_request = 3;
        ChannelInit channel_init = 4;
        PtyResize pty_resize = 5;
    }

    message Data{
        bytes payload = 1;
    }

    message PtyRequest{
        uint32 col_width = 1;
        uint32 row_height = 2;
    }

    message ShellRequest{
        
    }

    //Initializing this generic channel
    message ChannelInit{
        string session_id = 1;
    }

    message PtyResize {
        uint32 col_width = 1;
        uint32 row_height = 2;
    }
}

//The messages a client uses to interact with the sftp session
message ListDir{
    string path = 1;
    string session_id = 2;
}

message Path {
    string path = 1;
    string session_id = 2;
}

message FileTransferRequest {
    string session_id = 1;
    string remote_path = 2;
    string local_path = 3;
}

message FileTransferStatus {
    oneof typ{
        Progress progress = 1;
        Completed completed = 2;
    }
    message Progress{
        int32 bytes_read = 1;
    }
    message Completed{
        
    }
}

message FileWriteRequest {
    string file_handle_id = 1;
    bytes data = 2;
    string session_id = 3;
}

message FileWriteResponse {
    bool success = 1;
}

message FileReadRequest {
    string file_handle_id = 1;
    int32 buf_size = 2;
    string session_id = 3;
}

message FileReadResponse {
    bytes data = 1;
}

message FileCloseResponse {
    bool success = 1;
}

message FileMetadataRequest {
    string path = 1;
    string session_id = 2;
}

message FileMetadataResponse {
    string path = 1;
    uint64 size = 2;
    uint64 last_modified = 3; // Timestamp
    bool is_directory = 4;
}

message DirMetadata {
    string path = 1;
}


message FileList{
    repeated FileData files = 1;
}

message FileData{
    string file_name = 1;
    uint64 file_size = 2;
    string file_path = 3;
    bool is_dir = 4;
}

message PtyRequestResponse{
    string channel_id = 1;
}

message GenKeysRequest{

}

message GenKeysResponse{

}

message StreamRequest {
    string session_id = 2;
    bytes data = 1;
}

message StreamResponse {
    bytes data = 1;
}

message NewSessionRequest {
    string private_key = 3;
    string known_hosts_path = 4;
    SessionData session_data = 5;
}

message NewSessionResponse {
    string session_id = 1;
}

//Opening a new connection locally
message NewConnectionRequest {
    string coordinator_url = 1;
    string target_id = 2;
    //There's no good way of obtaining ipv6 in rust in both android and linux so we're passing it here
    optional string own_ipv6 = 3;
}

message NewConnectionResponse {
    string connection_id = 1;
}